import sys
import os
from datetime import datetime, timedelta
import random

# Corrigir o path para encontrar o m√≥dulo app
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)

# Adicionar a raiz do projeto ao Python path
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Mudar para o diret√≥rio raiz do projeto
os.chdir(project_root)

def create_test_user():
    try:
        print(f"üìÅ Diret√≥rio de trabalho: {os.getcwd()}")
        print(f"üêç Python path: {sys.path[0]}")
        
        # Agora importar os m√≥dulos
        from app import create_app, get_db, init_mongo
        from app.models import User, Transaction, Budget, Family
        
        # Criar app
        app = create_app()
        
        with app.app_context():
            # Inicializar mongo wrapper
            init_mongo()
            
            print("üöÄ Criando usu√°rio de teste...")
            
            # Obter inst√¢ncia do banco
            db = get_db()
            
            # Verificar se usu√°rio j√° existe
            existing_user = User.find_by_email('demo@financedash.com')
            if existing_user:
                print("‚ö†Ô∏è  Usu√°rio demo@financedash.com j√° existe!")
                choice = input("Deseja recriar? (s/n): ").lower()
                if choice != 's':
                    print("‚ùå Opera√ß√£o cancelada.")
                    return
                
                # Remover usu√°rio existente
                db.users.delete_one({'email': 'demo@financedash.com'})
                if hasattr(existing_user, '_id'):
                    db.transactions.delete_many({'added_by': existing_user._id})
                    db.budgets.delete_many({'owner_id': existing_user._id})
                print("üóëÔ∏è  Dados anteriores removidos.")
            
            # Criar usu√°rio demo
            demo_user = User('demo@financedash.com', 'Usu√°rio Demo')
            demo_user.set_password('demo123')
            user_id = demo_user.save()
            
            print(f"‚úÖ Usu√°rio criado com ID: {user_id}")
            
            # Criar transa√ß√µes de exemplo
            print("üìä Criando transa√ß√µes de exemplo...")
            
            categories_receitas = ['Sal√°rio', 'Freelance', 'Investimentos', 'Vendas']
            categories_despesas = ['Alimenta√ß√£o', 'Transporte', 'Moradia', 'Sa√∫de', 
                                 'Educa√ß√£o', 'Lazer', 'Vestu√°rio', 'Tecnologia']
            
            transactions_created = 0
            
            # Criar transa√ß√µes dos √∫ltimos 6 meses
            for i in range(180):  # 180 dias
                date = datetime.now() - timedelta(days=i)
                
                # 70% chance de ter transa√ß√£o por dia
                if random.random() < 0.7:
                    # Receitas (20% das transa√ß√µes)
                    if random.random() < 0.2:
                        transaction = Transaction(
                            owner_type='individual',
                            owner_id=user_id,
                            added_by=user_id,
                            trans_type='income',
                            amount=random.uniform(500, 5000),
                            category=random.choice(categories_receitas),
                            description=f'Receita - {random.choice(categories_receitas)}'
                        )
                        transaction.date = date
                        transaction.save()
                        transactions_created += 1
                    
                    # Despesas (80% das transa√ß√µes)
                    else:
                        transaction = Transaction(
                            owner_type='individual',
                            owner_id=user_id,
                            added_by=user_id,
                            trans_type='expense',
                            amount=random.uniform(10, 800),
                            category=random.choice(categories_despesas),
                            description=f'Gasto em {random.choice(categories_despesas)}'
                        )
                        transaction.date = date
                        transaction.save()
                        transactions_created += 1
            
            print(f"‚úÖ {transactions_created} transa√ß√µes criadas!")
            
            # Criar or√ßamentos de exemplo
            print("üí∞ Criando or√ßamentos de exemplo...")
            
            budgets_data = [
                {'category': 'Alimenta√ß√£o', 'limit': 800},
                {'category': 'Transporte', 'limit': 400},
                {'category': 'Lazer', 'limit': 300},
                {'category': 'Sa√∫de', 'limit': 200},
                {'category': 'Vestu√°rio', 'limit': 250}
            ]
            
            budgets_created = 0
            for budget_data in budgets_data:
                budget = Budget(
                    owner_id=user_id,
                    owner_type='individual',
                    category=budget_data['category'],
                    limit_amount=budget_data['limit'],
                    period='monthly'
                )
                budget.save()
                budgets_created += 1
            
            print(f"‚úÖ {budgets_created} or√ßamentos criados!")
            
            # Criar fam√≠lia de exemplo
            print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Criando fam√≠lia de exemplo...")
            
            family = Family('Fam√≠lia Demo', 'Fam√≠lia para demonstra√ß√£o', user_id)
            family.add_member(user_id, 'admin')
            family_id = family.save()
            
            # Adicionar fam√≠lia ao usu√°rio
            db.users.update_one(
                {'_id': user_id},
                {
                    '$push': {'families': family_id},
                    '$set': {'default_family': family_id}
                }
            )
            
            # Criar algumas transa√ß√µes familiares
            for i in range(20):
                date = datetime.now() - timedelta(days=random.randint(0, 60))
                
                transaction = Transaction(
                    owner_type='family',
                    owner_id=family_id,
                    added_by=user_id,
                    trans_type=random.choice(['income', 'expense']),
                    amount=random.uniform(50, 1000),
                    category=random.choice(categories_receitas + categories_despesas),
                    description=f'Transa√ß√£o familiar - {random.choice(["Supermercado", "Combust√≠vel", "Internet", "Restaurante"])}'
                )
                transaction.date = date
                transaction.save()
            
            print("‚úÖ Fam√≠lia e transa√ß√µes familiares criadas!")
            
            print("\nüéâ USU√ÅRIO DE TESTE CRIADO COM SUCESSO!")
            print("=" * 50)
            print("üìß Email: demo@financedash.com")
            print("üîë Senha: demo123")
            print("=" * 50)
            print("\nüöÄ Para testar:")
            print("1. Execute: python run.py")
            print("2. Acesse: http://localhost:5000")
            print("3. Fa√ßa login com os dados acima")
            print("\nüí° O usu√°rio j√° tem:")
            print(f"   ‚Ä¢ {transactions_created} transa√ß√µes")
            print(f"   ‚Ä¢ {budgets_created} or√ßamentos")
            print("   ‚Ä¢ 1 fam√≠lia com transa√ß√µes")
            print("   ‚Ä¢ Dados dos √∫ltimos 6 meses")
            
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print(f"üìÅ Diret√≥rio atual: {os.getcwd()}")
        print(f"üìÅ Python path: {sys.path[:3]}...")
        print("\nVerifique se:")
        print("1. Voc√™ est√° executando da raiz do projeto")
        print("2. O arquivo app/__init__.py existe")
        print("3. As depend√™ncias est√£o instaladas")
        print("4. O arquivo .env est√° configurado")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

def create_admin_user():
    """Criar usu√°rio administrador"""
    try:
        from app import create_app, get_db, init_mongo
        from app.models import User
        
        app = create_app()
        
        with app.app_context():
            # Inicializar mongo wrapper
            init_mongo()
            
            print("üëë Criando usu√°rio administrador...")
            
            email = input("Email do admin: ").strip()
            name = input("Nome do admin: ").strip()
            password = input("Senha do admin: ").strip()
            
            if not email or not name or not password:
                print("‚ùå Todos os campos s√£o obrigat√≥rios!")
                return
            
            # Verificar se j√° existe
            existing = User.find_by_email(email)
            if existing:
                print("‚ùå Usu√°rio j√° existe!")
                return
            
            # Criar usu√°rio
            admin_user = User(email, name)
            admin_user.set_password(password)
            user_id = admin_user.save()
            
            print(f"‚úÖ Usu√°rio administrador criado!")
            print(f"üìß Email: {email}")
            print(f"üîë Senha: {password}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def test_imports():
    """Testar se os imports funcionam"""
    try:
        print("üß™ Testando imports...")
        print(f"üìÅ Diret√≥rio atual: {os.getcwd()}")
        print(f"üêç Python path: {sys.path[0]}")
        
        # Testar import do Flask
        print("   ‚Ä¢ Testando Flask...")
        import flask
        print("   ‚úÖ Flask OK")
        
        # Testar import do app
        print("   ‚Ä¢ Testando app...")
        from app import create_app
        print("   ‚úÖ App OK")
        
        # Testar cria√ß√£o do app
        print("   ‚Ä¢ Testando create_app...")
        app = create_app()
        print("   ‚úÖ Create app OK")
        
        # Testar models
        print("   ‚Ä¢ Testando models...")
        from app.models import User
        print("   ‚úÖ Models OK")
        
        # Testar contexto do app
        print("   ‚Ä¢ Testando app context...")
        with app.app_context():
            from app import get_db, init_mongo
            init_mongo()
            db = get_db()
            print(f"   ‚úÖ Database conectado: {db.name}")
        
        print("\n‚úÖ Todos os imports funcionaram!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro no teste de imports: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_mongodb_connection():
    """Testar conex√£o espec√≠fica com MongoDB"""
    try:
        print("üóÑÔ∏è  Testando conex√£o MongoDB...")
        
        from pymongo import MongoClient
        import os
        from dotenv import load_dotenv
        
        load_dotenv()
        
        mongo_uri = os.environ.get('MONGO_URI')
        print(f"   ‚Ä¢ URI: {mongo_uri}")
        
        if not mongo_uri:
            print("   ‚ùå MONGO_URI n√£o encontrada no .env")
            return False
        
        client = MongoClient(mongo_uri)
        
        # Testar ping
        print("   ‚Ä¢ Testando ping...")
        info = client.admin.command('ping')
        print(f"   ‚úÖ Ping OK: {info}")
        
        # Testar acesso ao banco
        print("   ‚Ä¢ Testando banco 'financedash'...")
        db = client['financedash']
        collections = db.list_collection_names()
        print(f"   ‚úÖ Banco OK. Collections: {collections}")
        
        # Testar inser√ß√£o
        print("   ‚Ä¢ Testando inser√ß√£o...")
        test_collection = db['test']
        result = test_collection.insert_one({'test': True, 'timestamp': datetime.now()})
        print(f"   ‚úÖ Inser√ß√£o OK: {result.inserted_id}")
        
        # Limpar teste
        test_collection.delete_one({'_id': result.inserted_id})
        print("   ‚úÖ Teste de limpeza OK")
        
        client.close()
        print("\n‚úÖ Conex√£o MongoDB funcionando perfeitamente!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro na conex√£o MongoDB: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üè¶ DASHBOARD FINANCEIRO - CRIADOR DE USU√ÅRIOS")
    print("=" * 50)
    print("1. Criar usu√°rio de demonstra√ß√£o (recomendado)")
    print("2. Criar usu√°rio personalizado")
    print("3. Testar imports")
    print("4. Testar conex√£o MongoDB")
    print("5. Sair")
    
    try:
        choice = input("\nEscolha uma op√ß√£o (1-5): ").strip()
        
        if choice == '1':
            create_test_user()
        elif choice == '2':
            create_admin_user()
        elif choice == '3':
            test_imports()
        elif choice == '4':
            test_mongodb_connection()
        elif choice == '5':
            print("üëã Tchau!")
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            
    except KeyboardInterrupt:
        print("\n\nüëã Opera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")

if __name__ == '__main__':
    main()
